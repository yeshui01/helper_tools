/* ====================================================================
 * Author           : tianyh(mknight)
 * Email            : 824338670@qq.com
 * Last modified    : 2022-03-30 11:33
 * Filename         : orm_tool.go
 * Description      :
 * ====================================================================*/
package ormtools

import (
	"errors"
	"fmt"
	"os"
	"strings"

	"github.com/sirupsen/logrus"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

var db *gorm.DB

func InitDB(connStr string) bool {
	dbMysql, err := gorm.Open(mysql.Open(connStr), &gorm.Config{})
	if err != nil {
		logrus.Error("open db error")
		return false
	}
	db = dbMysql
	return true
}

// 读取数据表结构
func ReadTableStruct(tbName string) ([]*TableField, error) {
	fieldList := make([]*TableField, 0)
	sqlStmt := fmt.Sprintf("describe %s;", tbName)
	tx := db.Raw(sqlStmt)
	if tx != nil {
		rows, errOpt := tx.Rows()
		if errOpt == nil {
			var fieldName string
			var fieldType string
			var fieldNone string
			var fieldKey string
			var fieldDefaul interface{}
			var fieldExtra string
			for rows.Next() {
				rows.Scan(&fieldName, &fieldType, &fieldNone, &fieldKey, &fieldDefaul, &fieldExtra)
				tbField := &TableField{
					fieldName: fieldName,
					fieldType: transValueType(fieldType),
				}
				// 是否主键
				if len(fieldKey) > 0 {
					tbField.primaryKey = true
				}
				// 是否自动递增
				if fieldExtra == "auto_increment" {
					tbField.autoInc = true
				}
				fieldList = append(fieldList, tbField)
			}
		} else {
			logrus.Error(errOpt.Error())
		}
	} else {
		logrus.Errorf("get table struct error,tableName:%s", tbName)
		return fieldList, errors.New("get table struct error")
	}

	return fieldList, nil
}

func checkFileIsExist(filename string) bool {
	var exist = true
	if _, err := os.Stat(filename); os.IsNotExist(err) {
		exist = false
	}
	return exist
}

// 生成 grom 对象
func GenGormObjectDefine(tbName string, fieldList []*TableField, genPath string) {
	fileName := genPath + "/" + tbName + "_orm.go"
	var fileObj *os.File
	var fileErr error
	if checkFileIsExist(fileName) {
		fileObj, fileErr = os.OpenFile(fileName, os.O_RDWR, 0666) //打开文件
		if fileErr != nil {
			return
		}
		fileObj.Truncate(0)
	} else {
		fileObj, fileErr = os.Create(fileName) //创建文件
		if fileErr != nil {
			return
		}
	}
	fileObj.WriteString("// --- this file generated by tools, don't edit it!!!! ---\n")
	structName := StringToAaBb(tbName)
	fileObj.WriteString("package ormdef\n\n")
	fileObj.WriteString(fmt.Sprintf("type %s struct {\n", structName))
	// 找到最长的字段名,便于格式化对齐
	maxFieldLen := 0
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		lenCur := len(fieldName)
		if lenCur > maxFieldLen {
			maxFieldLen = lenCur
		}
	}
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		fieldType := getValueTypeName(fieldInfo.fieldType)
		curLen := len(fieldName)
		if curLen < maxFieldLen {
			for k := 0; k < maxFieldLen-curLen; k++ {
				fieldName = fieldName + " "
			}
		}
		if fieldInfo.primaryKey {
			fileObj.WriteString(fmt.Sprintf("\t%s	%s	`gorm:\"primary_key\"`\n", fieldName, fieldType))
		} else {
			fileObj.WriteString(fmt.Sprintf("\t%s	%s	`gorm:\"%s\"`\n", fieldName, fieldType, fieldInfo.fieldName))
		}
	}
	fileObj.WriteString("}\n")

	// TableName 方法
	tbNameFuncFormat := `func (t *%s) TableName() string {
	return "%s"
}`
	fileObj.WriteString(fmt.Sprintf(tbNameFuncFormat, structName, tbName))
	fileObj.Sync()
	fileObj.Close()
	logrus.Infof("rewrite file:%s", fileName)
}

// 生成对应的proto文件
func GenGormPbDefine(tbName string, fieldList []*TableField, genPath string) {
	fileName := genPath + "/" + tbName + "_ormpb.proto"
	var fileObj *os.File
	var fileErr error
	if checkFileIsExist(fileName) {
		fileObj, fileErr = os.OpenFile(fileName, os.O_RDWR, 0666) //打开文件
		if fileErr != nil {
			return
		}
		fileObj.Truncate(0)
	} else {
		fileObj, fileErr = os.Create(fileName) //创建文件
		if fileErr != nil {
			return
		}
	}
	fileObj.WriteString("// --- this file generated by tools, don't edit it!!!! ---\n")
	structName := StringToAaBb(tbName)
	fileObj.WriteString("syntax = \"proto3\";\n")
	fileObj.WriteString("package pborm;\n")
	fileObj.WriteString("option go_package = \"./pborm\";\n\n")
	fileObj.WriteString(fmt.Sprintf("message %s\n", structName))
	fileObj.WriteString("{\n")

	for i, fieldInfo := range fieldList {
		fieldName := fieldInfo.fieldName
		fieldName = StringToAaBb(fieldName)
		fieldType := getValueTypePbName(fieldInfo.fieldType)
		fileObj.WriteString(fmt.Sprintf("\t%s %s = %d;\n", fieldType, fieldName, i+1))
	}
	fileObj.WriteString(fmt.Sprintf("\tint32 DbStatus = %d;\n", len(fieldList)+1))
	fileObj.WriteString("}\n")
	fileObj.Sync()
	fileObj.Close()
	logrus.Infof("rewrite file:%s", fileName)
}

var tag1BeginDes string = "customtag1 code begin"
var tag1EndDes string = "customtag1 code end"
var tag2BeginDes string = "customtag2 code begin"
var tag2EndDes string = "customtag2 code end"
var tag3BeginDes string = "customtag3 code begin"
var tag3EndDes string = "customtag3 code end"

// 生成对应的table obj文件
func GenGormTableDefine(tbName string, fieldList []*TableField, genPath string, pkgPath string) {
	fileName := genPath + "/" + tbName + "_tb.go"
	var fileObj *os.File
	var fileErr error
	tag1Content := make([][]byte, 0)
	tag2Content := make([][]byte, 0)
	tag3Content := make([][]byte, 0)
	if checkFileIsExist(fileName) {
		fileObj, fileErr = os.OpenFile(fileName, os.O_RDWR, 0666) //打开文件
		if fileErr != nil {
			return
		}
		// 读取tag1 和 tag2
		tagStatus := 0 // 0-初始 1-开始 2-结束
		tagName := ""
		lineList := readFileForLine(fileName)
		for _, line := range lineList {
			s := string(line)
			if strings.Count(s, tag1BeginDes) > 0 {
				tagStatus = 1
				tagName = tag1BeginDes
				continue
			} else if strings.Count(s, tag2BeginDes) > 0 {
				tagStatus = 1
				tagName = tag2BeginDes
				continue
			} else if strings.Count(s, tag3BeginDes) > 0 {
				tagStatus = 1
				tagName = tag3BeginDes
				continue
			}
			if strings.Count(s, tag1EndDes) > 0 {
				tagStatus = 2
				tagName = ""
			} else if strings.Count(s, tag2EndDes) > 0 {
				tagStatus = 2
				tagName = ""
			} else if strings.Count(s, tag3EndDes) > 0 {
				tagStatus = 2
				tagName = ""
			}
			if tagStatus == 1 {
				// 开始装载tag里面的自定义内容
				if tagName == tag1BeginDes {
					tag1Content = append(tag1Content, line)
				} else if tagName == tag2BeginDes {
					tag2Content = append(tag2Content, line)
				} else if tagName == tag3BeginDes {
					tag3Content = append(tag3Content, line)
				}
			}
		}

		fileObj.Truncate(0)
	} else {
		fileObj, fileErr = os.Create(fileName) //创建文件
		if fileErr != nil {
			return
		}
	}

	fileObj.WriteString("// --- this file generated by tools, please write your code in custom block ---\n")
	structName := StringToAaBb(tbName)
	fileObj.WriteString("package tbobj\n\n")
	fileObj.WriteString("import (\n")
	fileObj.WriteString(fmt.Sprintf("\t\"%s/ormdef\"\n", pkgPath))
	fileObj.WriteString(fmt.Sprintf("\t\"%s/pborm\"\n", pkgPath))
	fileObj.WriteString(")\n\n")

	fileObj.WriteString(fmt.Sprintf("type Tb%s struct{\n", structName))
	fileObj.WriteString("\tTableObjOpt\n")
	fileObj.WriteString(fmt.Sprintf("\tormMeta *ormdef.%s\n", structName))
	// tag1
	fileObj.WriteString(fmt.Sprintf("\t// ------------------ %s ---------------------\n", tag1BeginDes))
	for _, l := range tag1Content {
		fileObj.WriteString(string(l))
		fileObj.WriteString("\n")
	}
	fileObj.WriteString(fmt.Sprintf("\t// ------------------ %s -----------------------\n", tag1EndDes))
	fileObj.WriteString("}\n\n")

	// 生成成员变量的访问方法
	getterFormat := `func (tb *Tb%s) Get%s() %s {
	return tb.ormMeta.%s
}`
	writterFormat := `func (tb *Tb%s) Set%s(%s %s) {
	tb.ormMeta.%s = %s
	tb.SetDbStatus(DbStatusUpdate)
}`
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		fileObj.WriteString(fmt.Sprintf("// %s\n", fieldName))
		// getter
		fileObj.WriteString(fmt.Sprintf(getterFormat, structName, fieldName, getValueTypeName(fieldInfo.fieldType), fieldName))
		fileObj.WriteString("\n")
		// writter
		fileObj.WriteString(fmt.Sprintf(writterFormat, structName, fieldName, StringToaaBb(fieldName), getValueTypeName(fieldInfo.fieldType), fieldName, StringToaaBb(fieldName)))
		fileObj.WriteString("\n\n")
	}

	// dump pb
	fileObj.WriteString(fmt.Sprintf("func (tb *Tb%s) DumpToPbOrm() *pborm.%s {\n", structName, structName))
	fileObj.WriteString("\ttb.Serialize()\n")
	fileObj.WriteString(fmt.Sprintf("\tpbObj := &pborm.%s{\n", structName))
	// 字段赋值
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		fileObj.WriteString(fmt.Sprintf("\t\t%s: tb.ormMeta.%s,\n", fieldName, fieldName))
	}
	fileObj.WriteString("\t}\n")
	// byte字段拷贝赋值
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		if fieldInfo.fieldType == FieldTypeBlob {
			fileObj.WriteString(fmt.Sprintf("\tpbObj.%s = make([]byte, len(tb.ormMeta.%s))\n", fieldName, fieldName))
			fileObj.WriteString(fmt.Sprintf("\tcopy(pbObj.%s, tb.ormMeta.%s)\n", fieldName, fieldName))
		}
	}
	fileObj.WriteString("\tpbObj.DbStatus = int32(tb.dbStatus)\n")
	fileObj.WriteString("\treturn pbObj\n")
	fileObj.WriteString("}\n")

	// load pb
	fileObj.WriteString(fmt.Sprintf("func (tb *Tb%s) LoadFromPbOrm(obj *pborm.%s) {\n", structName, structName))
	// 字段赋值
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		fileObj.WriteString(fmt.Sprintf("\ttb.ormMeta.%s = obj.%s\n", fieldName, fieldName))
	}
	// byte字段拷贝赋值
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		if fieldInfo.fieldType == FieldTypeBlob {
			fileObj.WriteString(fmt.Sprintf("\ttb.ormMeta.%s = make([]byte, len(obj.%s))\n", fieldName, fieldName))
			fileObj.WriteString(fmt.Sprintf("\tcopy(tb.ormMeta.%s, obj.%s)\n", fieldName, fieldName))
		}
	}
	fileObj.WriteString("\ttb.dbStatus = int8(obj.DbStatus)\n")
	fileObj.WriteString("\ttb.Unserialize()\n")
	fileObj.WriteString("}\n")

	// New函数
	fileObj.WriteString(fmt.Sprintf("func NewTb%s() *Tb%s {\n", structName, structName))
	fileObj.WriteString(fmt.Sprintf("\treturn &Tb%s{\n", structName))
	fileObj.WriteString(fmt.Sprintf("\t\tormMeta: &ormdef.%s{\n", structName))
	// 字段赋值
	for _, fieldInfo := range fieldList {
		fieldName := StringToAaBb(fieldInfo.fieldName)
		switch fieldInfo.fieldType {
		case FieldTypeInt:
			{
				fileObj.WriteString(fmt.Sprintf("\t\t\t%s: 0,\n", fieldName))
			}
		case FieldTypeBigint:
			{
				fileObj.WriteString(fmt.Sprintf("\t\t\t%s: 0,\n", fieldName))
			}
		case FieldTypeString:
			{
				fileObj.WriteString(fmt.Sprintf("\t\t\t%s: \"\",\n", fieldName))
			}
		case FieldTypeBlob:
			{
				fileObj.WriteString(fmt.Sprintf("\t\t\t%s: make([]byte, 0),\n", fieldName))
			}
		}
	}
	fileObj.WriteString("\t\t},\n")
	fileObj.WriteString("\t}\n")
	fileObj.WriteString("}\n")
	// tag2
	fileObj.WriteString(fmt.Sprintf("func (tb *Tb%s) Serialize() {\n", structName))
	fileObj.WriteString(fmt.Sprintf("\t// ------------------ %s ---------------------\n", tag2BeginDes))
	for _, l := range tag2Content {
		fileObj.WriteString(string(l))
		fileObj.WriteString("\n")
	}
	fileObj.WriteString(fmt.Sprintf("\t// ------------------ %s -----------------------\n", tag2EndDes))
	fileObj.WriteString("}\n")
	// tag3
	fileObj.WriteString(fmt.Sprintf("func (tb *Tb%s) Unserialize() {\n", structName))
	fileObj.WriteString(fmt.Sprintf("\t// ------------------ %s ---------------------\n", tag3BeginDes))
	for _, l := range tag3Content {
		fileObj.WriteString(string(l))
		fileObj.WriteString("\n")
	}
	fileObj.WriteString(fmt.Sprintf("\t// ------------------ %s -----------------------\n", tag3EndDes))
	fileObj.WriteString("}\n")

	// end
	fileObj.Sync()
	fileObj.Close()
	logrus.Infof("rewrite file:%s", fileName)
}
